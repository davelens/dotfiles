snippet php
	<?php

	${1}
snippet cl
	class ${1}
	{
		${2}
	}
snippet clt
	class ${1}Test extends ${2:PHPUnit_Framework_TestCase}
	{
		${3}
	}
snippet if
	if(${1})
	{
		${2}
	}
snippet ifelse
	if(${1})
	{
		${2}
	}
	else
	{
		${3}
	}
snippet else
	else
	{
		${1}
	}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
	{
		${4}
	}
snippet foreach
	foreach($${1:records} as $${2:record})
	{
		${3}
	}
snippet foreachkv
	foreach($${1:records} as $${2:key} => $${3:value})
	{
		${4}
	}
snippet fn
	${1:public} function ${2:name}(${3})
	{
		${4}
	}
snippet fns
	${1:public} static function ${2:name}(${3})
	{
		${4}
	}
snippet kv
	${1:key} => ${2:value},${3}
snippet ?
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet .
	$this->${1}
snippet .d
	$this->${1} = ${2};
snippet .dm
	$this->${1} = ${2};
	${3}
snippet ctor
	public function __construct(${1})
	{
		${2}
	}
snippet try
	try
	{
		${1}
	}
	catch($(2:Exception) $e)
	{
		${3}
	}

# Documentations
snippet doc
	/**
	* ${4}
	*
	* @author <${1:dave.lens}@${2:wijs}.${3:be}>
	*/
snippet /**
	/**
	 * ${1}
	 */
snippet @p
	@param ${1:type}${2:[optional]} $${3:varname} ${4:description}
snippet @r
	@return ${1:void}


