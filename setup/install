#!/usr/bin/env bash
set -e

readonly DOTBOT_DIR="dotbot"
readonly DOTFILES_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh

# Get dotbot installed
cd "${DOTFILES_PATH}"
git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
git submodule update --init --recursive "${DOTBOT_DIR}"

# Activate dotbot with the install configuration
"${DOTFILES_PATH}/${DOTBOT_DIR}/bin/dotbot" -d "${DOTFILES_PATH}" -c "setup/install.conf.yaml" "${@}"

[[ ! -f ~/.env ]] && $DOTFILES_PATH/setup/env_wizard

# Cache the installation directory string so we can reference it in subscripts.
# I don't use an ENV var directly because we need this *before* the shell loads
# the .bash_profile file.
[[ -f ~/.env ]] && touch ~/.env
grep -q 'DOTFILES_PATH' ~/.env || echo "DOTFILES_PATH=${DOTFILES_PATH}" >> ~/.env
echo "$(check) Loaded environment variables."

# Create an executable that allows us to update our dotfiles, among other 
# things.
dots_path="${HOME}/.local/bin/dots"
if [ ! -f $dots_path ]; then
  ln -s "${DOTFILES_PATH}/setup/dots" $dots_path
  chmod +x $dots_path
  echo "$(check) dots command installed."
  echo "    From now on you can use 'dots update' anywhere to pull in the latest dotfiles."
  echo
  echo "Please source ~/.bashrc or restart your shell to apply changes."
fi
