#!/usr/bin/env bash

# TODO: Would be better to switch most of my ENV vars I don't need in $PATH
# to live in a config/config.toml file or something.

# Handles interrupts with a clear and an "Aborted" message.
trap 'clear && interrupt_handler' SIGINT

# Derive the dotfiles' absolute path so we always have a sensible default for
# the $DOTFILES_CONFIG_HOME/env file.
export DOTFILES_REPO_HOME=$(dirname "$(dirname $(realpath "$0"))")

# Make sure we have all necessary paths available.
source "$DOTFILES_REPO_HOME/bash/env/xdg.sh"

#############################################################################
# This exposes all the box draw functions to this command.
# This is much faster than calling `utility bash box` for every draw action.
source "$DOTFILES_REPO_HOME/bin/utilities/bash/box"

# Command aliases for ease of use.
bitwarden="utility misc bitwarden"

# These are globals used by the box helper functions; set and forget.
# 80 is the default width for a terminal window, so adhere to that.
BOX_WIDTH=79
BOX_MARGIN=1
BOX_HIGHLIGHT=${1:-141} # Just to try out some easy colours for now.
[ $(tput cols) -lt 80 ] && fail "$(print_status -i error "Terminal window too small; must be at least 80 columns wide or you might miss information.")"

# Any time a status message is printed using this function, it will add
# a closing _box_border_right to the active line.
# Drawing the box retroactively seems appealing, but wouldn't work out due to
# drawing chars not happening instantly.
print_status() {
  $print_status -hl $BOX_HIGHLIGHT "$@"
  _box_border_right
}
#############################################################################

intro() {
  _box_top
  _box_print
  _box_print "This script will prime your terminal to use my dotfiles."
  _box_print "Press Enter to confirm suggested values."
  _box_print "Press Ctrl + c at any time to abort."
  _box_print
}

setup_encryption_intro() {
  _box_print
  _box_separator
  _box_print
  _box_print "ENCRYPTION                                                       (part 1/4)"
  _box_print
  _box_print "Utility commands like \`encrypt\` require a password-protected salt."
  _box_print
}

setup_secrets_management_intro() {
  _box_separator
  _box_print
  _box_print "SECRETS MANAGEMENT                                               (part 2/4)"
  _box_print
  _box_print "My various secrets and API keys are stored in Bitwarden."
  _box_print "These dotfiles can retrieve them from your vault(s) using \`bw\`,"
  _box_print "and keep them in ENV vars in $env_file_label."
  _box_print
}

setup_environment_variables_intro() {
  _box_separator
  _box_print
  _box_print "ENVIRONMENT VARIABLES                                            (part 3/4)"
  _box_print
  _box_print "The script will now prompt you to confirm every ENV var value."
  _box_print
}

finishing_up_intro() {
  _box_separator
  _box_print
  _box_print "STATUS (TODO)                                                    (part 4/4)"
  _box_print
  _box_print "This is a summary of everything the script did."
  _box_print "If something looks off, you can re-run the script."
  _box_print
}

bitwarden_intro() {
  _box_print
  _box_print "My various secrets and API keys are stored in Bitwarden."
  _box_print "I built in support to retrieve and use them in these dotfiles."
  _box_print "(NOTE: This does not use the Secrets Manager yet; it's still in beta."
  _box_print
}

bitwarden_data_intro() {
  _box_print
  _box_print "You need the following two items ready in Bitwarden:"
  _box_print
  _box_print "1. An item of the Identity type, containing your first and last name."
  _box_print
  _box_print "2. An item of the Login type, named \"Github\", containing:"
  _box_print "   a. The 'Username' field entry (i.e. your Github e-mail address)"
  _box_print "   b. A custom field entry named 'Public username'"
  _box_print "   c. A custom field entry named 'Personal access token'"
  _box_print
}

setup_encryption() {
  setup_encryption_intro
  if [ -z "$DOTFILES_SALT" ]; then
    setup_salt
  else
    print_status -i ok "Encrypted salt is ready."
    _box_print
  fi
}

setup_salt() {
  local looping icon passkey salt_value
  looping=${1:-0}
  icon="$(pending $BOX_HIGHLIGHT)"

  # So we know where to restore to after a variable number of attempts.
  [ $looping -eq 0 ] && $cursor save

  passkey=$($prompt_user -i "$icon " -m "Enter your salt passkey: ")
  $cursor restore clear-down # Restore prompt starting point for feedback.
  salt_value=$($salt -k "$passkey" current)

  if [ $? -eq 0 ]; then
    export DOTFILES_SALT="$salt_value"
    print_status -i ok "Encrypted salt is ready."
  else
    print_status -i error "Encrypted salt not ready; possibly wrong passkey."
    setup_salt 1
    return
  fi

  _box_print
  return
}

setup_secrets_management() {
  setup_secrets_management_intro

  bitwarden_prompt="$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -yn "Would you like to use Bitwarden to retrieve your secrets?")"

  if [ $bitwarden_prompt == "y" ]; then
    setup_bitwarden
  else
    print_status -i error "Not using Bitwarden."
    _box_print
  fi
}

setup_bitwarden() {
  print_status -n "Unlocking vault(s) ... "

  BW_SESSION="$($bitwarden unlock)"

  if [ -z $BW_SESSION ]; then
    print_status -i error "Could not unlock Bitwarden vaults."
    sleep 2 # Just so the user can see the error message.
    $cursor clear-up:9
    setup_secrets_management # Give them a chance to gracefully skip Bitwarden.
    return
  else
    print_status -i ok "Using Bitwarden."
    _box_print
  fi

  print_status "Setup will now prompt you for some information from your Bitwarden vaults."

  OWNER_NAME=$($bitwarden --prompt "Select your identity: " identities)
  GITHUB_EMAIL=$($bitwarden -e --prompt "Select your Github username: " -q "Github" items)

  $cursor clear-up
  print_status -i ok "Data from vaults OK"
  _box_print

  return

  #print_status -n "Preparing data from vault(s) ... "
  #owner_data=$(bw list items --session "$BW_SESSION" --search "$OWNER_NAME" | jq '.[] | select(.identity != null)')
  #bitwarden_data=$(bw get item --session "$BW_SESSION" "$GITHUB_EMAIL")

  # TODO: At this point, if you don't have a good value for $OWNER_NAME,
  # you will see "Not found" and the script will break.
  # Catch the error after every bw call, or use fzf to get the right values.
  #if [ $? -gt 0 ]; then
  #clear_prompt_line
  #fi

  GITHUB_USERNAME="$(echo $bitwarden_data | jq -r '.fields[] | select(.name == "Public username").value')"
  GITHUB_PERSONAL_ACCESS_TOKEN=$(echo $bitwarden_data | jq -r '.fields[] | select(.name == "Personal access token") | .value')
  print_status -i ok "Vault data prepared."
}

setup_env() {
  setup_environment_variables_intro

  if [ -f $env_file ]; then
    source "$env_file"
    print_status -i ok "Loaded environment variables from $env_file_label."
    _box_print
  fi

  # TODO: Confirm all values
  #OWNER_NAME=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$OWNER_NAME" "Enter your first and last name: ")
  #GITHUB_EMAIL=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$GITHUB_EMAIL" "Enter the e-mail address you log into Github with: ")
}

setup_finish() {
  finishing_up_intro
  # TODO: Overview of all actions. Will probably have to have a central array
  # so I can just loop that and print messages.
}

env_data_wizard() {
  _box_print

  REPO_NAMESPACE=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "${REPO_NAMESPACE:-$HOME/Repositories}" "Where do you keep your local Git(hub) repos? ")

  if [ -z $OWNER_NAME ]; then
    OWNER_NAME=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$OWNER_NAME" "Enter your first and last name: ")
  fi

  if [ -z $GITHUB_EMAIL ]; then
    GITHUB_EMAIL=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$GITHUB_EMAIL" "Enter the email address you log into Github with: ")
  fi

  GITHUB_USERNAME=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$GITHUB_USERNAME" "Enter your public Github username: ")

  GITHUB_PERSONAL_ACCESS_TOKEN=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$GITHUB_PERSONAL_ACCESS_TOKEN" "Enter your Github Personal access token: ")

  # Can be either a literal key, or a path to a key file.
  # TODO: Ask to load in an SSH key to set the path
  GITHUB_SIGNING_KEY=$($prompt_user -i "$(pending $BOX_HIGHLIGHT) " -d "$GITHUB_SIGNING_KEY" "Enter your Git signing key: ")

  # Check if the REPO_NAMESPACE path exists, and create it if not.
  if [ ! -d $REPO_NAMESPACE ]; then
    print_status -n "Creating $REPO_NAMESPACE ... "
    # You want to use `grealpath` here to correctly resolve the tilde in the path
    # and prevent bash from creating a directory named "~". -.-
    #mkdir -p "$(grealpath $REPO_NAMESPACE)"
    print_status -i ok "Created $REPO_NAMESPACE."
  fi
}

write_env_files() {
  # TODO: I think I might've broken macos support here, so double check!
  declare -p \
    OWNER_NAME \
    REPO_NAMESPACE \
    GITHUB_EMAIL \
    GITHUB_USERNAME \
    GITHUB_PERSONAL_ACCESS_TOKEN |
    sed 's/declare --/declare -x/g' >"$env_file"

  # Write to "$XDG_CONFIG_HOME/git/config.env" so we can keep our gitconfig
  # user-agnostic.
  [ -f "$HOME/.ssh/id_rsa.pub" ] && export GITHUB_SIGNING_KEY="$HOME/.ssh/id_rsa.pub"

  # So every variable we need is exported before we write the config.env file.
  eval "$(source_env)"
  content=$(envsubst <"$DOTFILES_REPO_HOME/setup/gitconfig.env.template")
  echo "$content" >"$XDG_CONFIG_HOME/git/config.env"

  # Include the allowed signers file, if it's there.
  if [ -f "$HOME/.ssh/allowed_signers" ]; then
    printf "[gpg \"ssh\"]\n  allowedSignersFile = ~/.ssh/allowed_signers" \
      >>"$XDG_CONFIG_HOME/git/config.env"
  fi
}

main() {
  intro

  local using_bitwarden=0
  local env_file="$DOTFILES_CONFIG_HOME/env"
  local env_file_label="${env_file/$HOME/"~"}"

  proceed="$($prompt_user -c -i "$(pending $BOX_HIGHLIGHT) " "Press any key to continue ... ")"
  [ -n $proceed ] && $cursor move-start clear-up

  setup_encryption
  setup_secrets_management
  setup_env
  write_env_files
  setup_finish

  _box_print
  _box_print "Environment variables written to these files:"
  _box_print "  $gitconfig_env_file"
  _box_print "  $env_file_label"
  _box_print
  _box_print "Please source (\`s\`) or restart your shell to apply changes."
  _box_print
  _box_separator
  _box_print
  print_status -i ok "All done!"
  _box_print
  _box_bottom
}

main "$@"
