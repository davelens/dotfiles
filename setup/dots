#!/usr/bin/env bash
set -e

source "$DOTFILES_CONFIG_HOME"/env

log_file="$DOTFILES_STATE_HOME"/dots.log
[ ! -f "$log_file" ] && touch "$log_file"

usage() {
  echo
  echo "Usage: $(basename "$0") [-h|--help] <command>"
  echo
  echo "Commands:"
  echo "  logs          Opens the logfile in $EDITOR (read-only if applicable)."
  echo "  install       Attempts a (re)install through dotbot."
  echo "  update        Updates dotfiles to the most recent version."
  echo
  echo "Options:"
  echo "  -h|--help    Show this help message and exit."
  exit 0
}

logs() {
  if [ ! -s "$log_file" ]; then
    fail "$($print_status -i error "The log file is currently empty.")"
  fi

  if [[ "$EDITOR" == *vim* ]]; then
    winbar='Press "q" to stop reading or "c" to clear the logs'

    $EDITOR \
      -c 'set nomodifiable laststatus=0' \
      -c 'highlight WinBarMsg guifg=#ffcc00 guibg=#44475a gui=bold' \
      -c "lua vim.o.winbar = '%#WinBarMsg#$winbar'" \
      -c 'nnoremap q :q<CR>' \
      -c "nnoremap c :silent !truncate -s 0 '$log_file' \| edit<CR>" \
      -R + "$log_file"
  else
    $EDITOR "$log_file"
  fi
}

install() {
  "$DOTFILES_REPO_HOME/setup/install"
}

update() {
  error_occurred=0

  # Check for uncommitted changes and exit gracefully if so.
  if ! git -C "$DOTFILES_REPO_HOME" diff-files --quiet; then
    $print_status -i error "There are uncommitted changes in your dotfiles. Please commit or stash them before updating:"
    echo
    git -C "$DOTFILES_REPO_HOME" st
    exit 1
  fi

  # Pull the latest changes
  $print_status -n "Pulling in changes ..."

  if git -C "$DOTFILES_REPO_HOME" fetch origin >/dev/null; then
    if ! git -C "$DOTFILES_REPO_HOME" merge --no-commit origin/"$(git -C "$DOTFILES_REPO_HOME" b)" &>>"$log_file"; then
      error_occurred=1
    fi
  else
    error_occurred=1
  fi

  # Run the installer if no errors occurred
  if [ $error_occurred -eq 0 ]; then
    $print_status -i ok "Files updated to latest version"
    $print_status -n "Running installer ..."
    "$DOTFILES_REPO_HOME"/setup/install &>>"$log_file" || error_occurred=1
  fi

  # Handle final status
  if [ $error_occurred -eq 0 ]; then
    $print_status -i ok "Update complete"
  else
    $print_status -i error "Update failed"
    echo "    Logs available at $log_file"
    exit 1
  fi
}

# Parse arguments
if [[ $# -eq 0 ]]; then
  usage
fi

case "$1" in
-h | --help)
  usage
  ;;
logs)
  logs
  ;;
install)
  install
  ;;
update)
  update
  ;;
*)
  echo "Unknown command: $1"
  usage
  ;;
esac
