#!/usr/bin/env bash
set -e

source ~/.env
[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh
trap 'error_handler' ERR

log_file="${DOTFILES_STATE_PATH}/dots.log"
[ ! -f "$log_file" ] && touch "$log_file"

usage() {
  echo
  echo "Usage: $(basename $0) [-h|--help] <command>"
  echo
  echo "Commands:"
  echo "  logs          Opens the logfile in read-only vim."
  echo "  update        Updates dotfiles to the most recent version."
  echo
  echo "Options:"
  echo "  -h|--help    Show this help message and exit."
  exit 0
}

logs() {
  [[ "$EDITOR" == *vim* ]] && $EDITOR -R + "$log_file" || $EDITOR "$log_file"
}

update() {
  error_occurred=0

  # Check for uncommitted changes and exit gracefully if so.
  if ! git -C "$DOTFILES_PATH" diff-files --quiet; then
    show_status "error" "There are uncommitted changes in your dotfiles. Please commit or stash them before updating:"
    echo
    echo
    echo "$(cd $DOTFILES_PATH && git st)"
    exit 1
  fi

  # Pull the latest changes
  show_status "pending" "Pulling in changes ..."
  cd "$DOTFILES_PATH" && git pull origin "$(git b)" &>> "$log_file" || error_occurred=1
  show_status "ok" "Files updated to latest version"
  echo

  # Run the installer if no errors occurred
  if [[ $error_occurred -eq 0 ]]; then
    show_status "pending" "Running installer ..."
    "$DOTFILES_PATH/setup/install" &>> "$log_file" || error_occurred=1
  fi

  # Handle final status
  if [[ $error_occurred -eq 0 ]]; then
    show_status "ok" "Update complete"
    echo
  else
    show_status "error" "Update failed"
    echo
    echo "    Logs available at $log_file"
    exit 1
  fi
}

# Parse arguments
if [[ $# -eq 0 ]]; then
  usage
fi

case "$1" in
  -h|--help)
    usage
    ;;
  logs)
    logs
    ;;
  update)
    update
    ;;
  *)
    echo "Unknown command: $1"
    usage
    ;;
esac
