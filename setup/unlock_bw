#!/usr/bin/env bash
set -e

[[ -f ~/.env ]] && source ~/.env
[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh
trap 'error_handler' ERR
trap 'interrupt_handler' SIGINT

bw_session_file="$DOTFILES_STATE_PATH/bw-session"

function prompt_password() {
  check_bw_session && return 0
  read -s -p "$(pending) Enter your Bitwarden master password [hidden]: " password
  handle_session_save
}

function check_bw_session() {
  if [[ -n "$bw_session_file" ]]; then
    if bw unlock --check --quiet 2>/dev/null; then
      show_status "ok" "Loaded Bitwarden session from environment."
      echo && return 0
    fi
  fi

  if [[ -f "$bw_session_file" ]]; then
    export BW_SESSION=$(cat "$bw_session_file")
    if bw unlock --check --quiet 2>/dev/null; then
      show_status "ok" "Loaded Bitwarden session from file."
      echo && return 0
    fi
  fi

  return 1
}

function handle_session_save() {
  show_status "pending" "Saving Bitwarden session ..."
  local session=$(echo "$password" | bw unlock --raw 2>/dev/null)

  if [[ -z "$session" ]]; then
    show_status "error" "Could not unlock vault. Try again or press Ctrl+c to exit."
    echo
    prompt_password # Recurse until it works or user exits.
    return # Exit to prevent execution for every time the unlock failed.
  fi

  echo "$session" >"$bw_session_file"
  export BW_SESSION="$session"
  show_status "ok" "Bitwarden session saved."
  echo
}

function main() {
  ensure_brew_dependency "bitwarden-cli" "bw"
  ensure_brew_dependency "jq"
  prompt_password
}

# main() is isolated to allow for readability and easier testing.
main "$@"
