#!/usr/bin/env bash
set -e

[[ -f ~/.env ]] && source ~/.env
#trap 'error_handler' ERR
#trap 'interrupt_handler' SIGINT

function prompt_password() {
  #check_bw_session && return 0

  if [[ ! -f "$bw_mp_file" ]]; then
    encrypt \
      -i $(prompt-user -m "Enter your Bitwarden master password: ") \
      -o "$DOTFILES_STATE_PATH/bw-mp.enc"
  fi

  handle_session_save
}

#function check_bw_session() {
  #if [[ -n "$bw_session_file" ]]; then
    #if bw unlock --check --quiet 2>/dev/null; then
      #print-status -i ok "Loaded Bitwarden session from environment."
      #return 0
    #fi
  #fi

  #if [[ -f "$bw_session_file" ]]; then
    #export BW_SESSION=$(cat "$bw_session_file")
    #if bw unlock --check --quiet 2>/dev/null; then
      #print-status -i ok "Loaded Bitwarden session from file."
      #return 0
    #fi
  #fi

  #return 1
#}

function mp() {
  decrypt -f "$bw_mp_file"
}

function handle_session_save() {
  print-status -n "Saving Bitwarden session ..."
  local session=$(echo "$(mp)" | bw unlock --raw 2>/dev/null)

  if [[ -z "$session" ]]; then
    print-status -i error "Could not unlock vault. Try again or press Ctrl+c to exit."
    prompt_password # Recurse until it works or user exits.
    return # Exit to prevent execution for every time the unlock failed.
  fi

  export BW_SESSION="$session"
  print-status -i ok "Bitwarden session saved."
}

function main() {
  local bw_mp_file="$DOTFILES_STATE_PATH/bw-mp.enc"

  ensure_brew_dependency "bitwarden-cli:bw"
  ensure_brew_dependency "jq"
  prompt_password
}

# main() is isolated to allow for readability and easier testing.
main "$@"
