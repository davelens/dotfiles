#!/usr/bin/env bash

[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh

NAME=$(basename $0)
TMPDIR="$(mktemp -d "$DOTFILES_STATE_PATH/tmp/$NAME.XXXXXX")" || exit 1
trap 'error_handler' ERR
trap 'rm -rf -- "$MYTMPDIR"' EXIT

usage() {
  echo
  echo "Usage: $NAME [-h|--help] [-i|-f] <input>"
  echo 
  echo "Removes aes-256-cbc encryption from a string or file using openssl."
  echo "Works in tandem with \`encrypt\`."
  echo
  echo "Examples:"
  echo "  $NAME -p mypassphrase -f bw-mp.enc"
  echo "  $NAME -f test.enc"
  echo
  echo "Options:"
  echo "  -h|--help                   Show this help message and exit."
  echo "  -i|--in <string>            Provide a value to decrypt."
  echo "  -f|--file                   Provide path to a file to decrypt."
  echo "  -p|--passkey <string>       Provide a passkey to decrypt with."
  echo "                              (NOTE: No spaces!)"
}

# Fail early if no arguments are given.
[[ $# -eq 0 ]] && usage && exit 1

function call_openssl() {
  local string="openssl aes-256-cbc -d -pbkdf2"

  if [[ -n "$passphrase" ]]; then
    string+=" -k $passphrase"
  fi

  string+=" -in $input"

  echo $string
}

function main() {
  local input output passphrase

  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --file)
      shift
      if [[ ! -f $1 ]]; then
        utility bash print-status -i error "Input file not found: $1"
        usage && exit 1
      fi
      input="$1"
      shift
      ;;
    -i | --in)
      shift
      input="$1"

      if [[ -p /dev/stdin ]]; then
        input="$(cat /dev/stdin)"
      fi

      local tempfile=$(mktemp -p "$MYTMPDIR")
      printf "%s" "$input" > $tempfile
      input="$tempfile"
      shift
      ;;
    -p | --passphrase)
      shift
      passphrase="$1"
      shift
      ;;
    *)
      utility bash print-status -i error "Invalid option: $1"
      usage && exit 1
      ;;
    esac
  done

  if [[ -z $input ]]; then
    utility bash print-status -i error "You need to provide a string or file to encrypt."
    usage && exit 1
  fi

  $(call_openssl)
}

main "$@"
