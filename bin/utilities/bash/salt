#!/usr/bin/env bash

[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh
trap 'error_handler' ERR

usage() {
  echo
  echo "Usage: $(basename $0) [-h|--help] <command>"
  echo
  echo "Commands:"
  echo "  new                         Generate a new salt."
  echo
  echo "Options:"
  echo "  -h|--help                   Show this help message and exit."
  echo "  -p|--passphrase             The passphrase to use for encryption."
}

# Fail early if no arguments are given.
[[ $# -eq 0 ]] && usage && exit 1

cursor() { utility bash cursor "$@"; }
encrypt() { utility bash encrypt "$@"; }
decrypt() { utility bash decrypt "$@"; }
print-status() { utility bash print-status "$@"; }
prompt-user() { utility bash prompt-user "$@"; }

function salt_file() {
  echo "$DOTFILES_STATE_PATH/salt"
}

function new() {
  local pass="$passphrase"
  local jump=${1:-2}

  if [[ -z "$passphrase" ]]; then
    pass=$(prompt-user -i "$(pending) " -m "Enter your desired password: ")
    local pass_confirmation=$(prompt-user -i "$(pending) " -m  "Confirm your entered password: ")

    if [[ -z $pass ]] || [[ -z $pass_confirmation ]] || [[ $pass != $pass_confirmation ]]; then
      cursor clear-up:$jump
      print-status -i error "Passwords do not match."
      new 3
      return
    fi
  fi

  [[ -f "$(salt_file)" ]] && rm "$(salt_file)"
  echo $(openssl rand -base64 32) | utility bash encrypt -p "$pass" -i >> $(salt_file)

  cursor clear-up:$jump
  print-status -i ok "Salt successfully saved."
  unset rand
}

function main() {
  local command passphrase

  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -p | --passphrase)
      shift
      passphrase="$1"
      shift
      ;;
    new)
      command="$1"
      shift
      ;;
    *)
      utility bash print-status -i error "Invalid option: $1"
      usage && exit 1
      ;;
    esac
  done

  $command
}

main "$@"
