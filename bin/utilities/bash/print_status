#!/usr/bin/env bash
# "referenced but not assigned" are false positives for us.
# shellcheck disable=SC2154

# command that displays status updates prefixed with an icon

name="print_status"

usage() {
  echo
  echo "Usage: $name [-h|--help] <options> <message>"
  echo
  echo "Options:"
  echo "  -h|--help                   Show this help message and exit."
  echo "  -i|--icon <name>            A prefix icon between square brackets."
  echo "                              Can be anything, but has some presets:"
  echo "                              - $(check) -> 'ok'"
  echo "                              - $(cross) -> 'error'"
  echo "                              - $(pending) -> 'pending'"
  echo "  -hl|--highlight <colour>    A number between 0 and 255."
  echo "  -ni|--no-icon               Leaves out the status symbol."
  echo "  -p|--prefix <string>        Any output to print before the icon."
  echo "  -n                          Do not print the trailing newline character."
  echo "  -nc|--no-clear              Does not clear the line before output."
}

#############################################################################

function icon {
  case "$icon" in
  pending) symbol="$(pending "$color")" ;;
  ok) symbol="$(check "$color")" ;;
  error) symbol="$(cross "$color")" ;;
  *) [ -n "$icon" ] && symbol="$(colorize "$color" "[")$icon$(colorize "$color" "]")" ;;
  esac

  echo "$symbol"
}

function newline {
  [ $newline -eq 1 ] && echo
}

function main {
  # Fail early if no arguments are given.
  [ $# -eq 0 ] && usage && exit 0

  local newline=1 clearline=1 icon="pending" color=255 message prefix

  while [ $# -gt 0 ]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -i | --icon)
      shift
      icon="$1"
      shift
      ;;
    -ni | --no-icon)
      icon=
      shift
      ;;
    -p | --prefix)
      shift
      prefix="$1"
      shift
      ;;
    -nc | --no-clear)
      shift
      clearline=0
      ;;
    -hl | --highlight)
      shift
      color=$1
      shift
      ;;
    -n)
      shift
      newline=0
      ;;
    *)
      if [ -z "$message" ]; then
        message="$1"
      else
        # This used to use print_status itself, but that *has* to break
        # something.
        echo "[Error] Invalid option: $1"
        usage && exit 1
      fi
      shift
      ;;
    esac
  done

  [ $clearline -eq 1 ] && $cursor move-start clear-line

  [ -n "$prefix" ] && result="$prefix"
  [ -n "$icon" ] && result+="$(icon) "
  result+="$message$(newline)"
  echo "$result"
}

#############################################################################
unset name
main "$@"
