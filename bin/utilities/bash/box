#!/usr/bin/env bash

# box-drawing characters taken from Wikipedia:
# https://en.wikipedia.org/wiki/Box-drawing_characters#Unix,_CP/M,_BBS

# TODO:
# -[ ] Implement a word wrap function.
# -[x] Add a way to expose all individual box drawing functions
#      so I can use them in the env_wizard.

name="box"

usage() {
  echo
  echo "Usage: $NAME [-h|--help] <option(s)> \"Line 1\" \"Line 2\" ... "
  echo
  echo "Draw a simple box around the given text. Useful for some basic"
  echo "section separating in terminal output."
  echo
  echo "Examples:"
  echo "  $NAME \"This is pretty text in a pretty box.\""
  echo "  $NAME --center \"This box is dead center.\""
  echo "  $NAME -m 9 -w 120 \"This box has a margin, and a specific width.\""
  echo 
  echo "Commands:"
  echo "  top                       Draw the top of the box."
  echo "  bottom                    Draw the bottom of the box."
  echo "  border-right              Draw a vertical line to the right of the box."
  echo "  separator                 Draw a horizontal line within the box."
  echo "  line                      Like \`separator\`, but without borders."
  echo "  print                     Print a line of text within the box."
  echo
  echo "Options:"
  echo "  -h|--help                 Show this help message and exit."
  echo "  -w|--width <#>            Provide the column width of the box."
  echo "                            (Default: 80)"
  echo "  -m|--margin <string>      The margin to the left of the box."
  echo "                            (Default is a single space. Yes, this is text)"
  echo "  -c|--center               Centers the box. Replaces -m."
  echo "  -e|--execute <command>    Execute a subcommand."
}

###############################################################################

function _box_color {
  printf "$(colorize $BOX_HIGHLIGHT $1)"
}

function _box_top {
  printf "$(_box_margin)$(_box_color ┌)" && \
    printf "%.s$(_box_color ─)" $(seq 1 ${1:-$(($BOX_WIDTH - 2))}) && \
    printf "$(_box_color ┐)\n"
}

function _box_line {
  printf "%.s${2:-$(_box_color ─)}" $(seq 1 ${1:-$(($BOX_WIDTH - 2))})
}

# Like a horizontal line within a box.
function _box_separator {
  printf "$(_box_margin)$(_box_color ├)$(_box_line $(($BOX_WIDTH - 2)))$(_box_color ┤)\n"
}

function _box_print {
  printf "$(_box_margin)$(_box_color │) %-$(($BOX_WIDTH - 4))s $(_box_color │)\n" "$1"; 
}

function _box_bottom {
  printf "$(_box_margin)$(_box_color └)" && \
    printf "%.s$(_box_color ─)" $(seq 1 ${1:-$(($BOX_WIDTH - 2))}) && \
    printf "$(_box_color ┘)\n"
}

function _box_border_right { 
  $cursor move-start move-up col:$(($BOX_WIDTH + 1)) print:$(_box_color │)\\n
}

function _box_margin {
  if [[ $center -eq 1 ]]; then
    BOX_MARGIN=$(expr $(expr $(tput cols) - $BOX_WIDTH) / 2)
  elif [[ $BOX_MARGIN -eq 0 ]]; then
    return 0
  fi

  repeat $BOX_MARGIN echo -n "." | sed 's/./ /g'
}

###############################################################################

# Sourcing this file will expose the same functions used by this command.
# Explicitly exporting these here will make them available in all subshells.
if is_sourced; then
  export -f _box_color
  export -f _box_top
  export -f _box_bottom
  export -f _box_line
  export -f _box_separator
  export -f _box_print
  export -f _box_border_right
  export -f _box_margin
  return 0
else
  # Fail early if no arguments are given.
  [[ $# -eq 0 ]] && usage && exit 1
fi

###############################################################################

function box {
  # TODO: Implement some kind of word wrapping.
  #[[ ${#value} -gt $BOX_WIDTH ]] && wrap_lines
  _box_top
  _box_print
  repeat _box_print "$value" 
  _box_print
  _box_bottom
}

###############################################################################

function main {
  is_sourced && return

  local value command center=0 args=()
  BOX_WIDTH=80
  BOX_MARGIN=0
  BOX_HIGHLIGHT=255

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -w | --width)
      shift
      BOX_WIDTH="$1"
      shift
      ;;
    -m | --margin)
      shift
      BOX_MARGIN="$1"
      shift
      ;;
    -hl | --highlight)
      shift
      BOX_HIGHLIGHT=$1
      shift
      ;;
    -c | --center)
      shift
      center=1
      ;;
    *)
      if [[ "$1" =~ ^- ]]; then
        $print_status -i error "Invalid option: $1"
        usage && exit 1
      else
        case "$1" in
          top|bottom|border-right|separator|line)
            command="_box_${1/-/_}"
            break
            ;;
          print)
            command="_box_print"
            shift
            value="$1"
            break
            ;;
          *)
            command="box"
            value="$@"
            break
            ;;
        esac
      fi
      ;;
    esac
  done

  if [[ ! $(command -v "$command") ]]; then
    $print_status -i error "Command not found: $command"
    exit 1
  fi

  $command "$value"
}

unset name
main "$@"
