#!/usr/bin/env bash

# This command can be run with `git pr-body` (set in ~/.gitconfig)

# It's purpose is simply to allow you to keep a local version of the GitHub PR
# body message. I often include todos in there, and it's handy to edit them
# locally. The command has these features:
#
# * It automatically installs Github's CLI tool if you don't have it yet.
# * It uses the existing PR body as a base for further updates.
# * It keeps the writing buffer in .git/ so it's automatically ignored by git.
# * It asks to push the updated body to the GitHub website.
# * It returns a link to the PR as the command finishes.
set -e
[[ ! -d .git ]] && fail "ERROR: Local working directory is not a git repo."

if [ $# -eq 0 ]; then
  branch_name=$(git b) # `git b` is an alias in my ~/.gitconfig

  if [ -z $branch_name ]; then
    read -p "For which branch would you like to edit the pull request body? " branch_name
    [[ ! `git branch | grep $branch_name` ]] && echo "$branch_name is not a git branch." && exit
  fi
else
  branch_name="$1"
fi

[ ! `command -v gh` ] && brew install github/gh/gh

# Grab the PR ID and bootstrap the branch body's cache file.
repo_suffix=`git remote get-url origin | sed -e 's/git@github.com://' -e 's/.git//'`
pr_id=`gh pr list 2>&1 | grep $branch_name | awk '{print $1}'`
body_file=".git/$branch_name.md"

# Stop here if there's no PR available for the current branch.
if [ ! $pr_id ]; then
  echo "No pull requests exist for branch $branch_name in $repo_suffix."
  exit
fi

# Prefill our buffer with the existing PR body.
if [ ! -f ".git/$branch_name.md" ]; then
  echo "Creating .git/$branch_name.md"
  [ -f output.json ] && rm output.json
  gh pr view $pr_id --json body --jq '.body' | tr -d '\r' > .git/$branch_name.md
  #cat output.json
  #ruby -rjson -e 'j = JSON.parse(File.read("output.json"));puts j["body"]' > .git/$branch_name.md
  #rm output.json
fi

# Storing the PR body locally, using the name of the branch. Commit it or add it
# to your .gitignore.
${EDITOR} ".git/$branch_name.md"

# If for some reason you end up removing the file at this point, we just exit.
[ ! -f ".git/$branch_name.md" ] && exit

echo
echo "*********************************<BODY CONTENT>**********************************"
cat .git/$branch_name.md
echo "*********************************</BODY CONTENT>*********************************"
echo

while true; do
  read -n1 -p "Push to GitHub? (y/n) " yn
  case $yn in
    [Yy]* ) echo && gh pr edit "$pr_id" --body "$(cat .git/$branch_name.md)"; break;;
    [Nn]* ) echo && exit;;
    * ) echo && echo "Please answer `tput smul`Y`tput rmul`es or `tput smul`N`tput rmul`o.";;
  esac
done
