#!/usr/bin/env bash
set -e

[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh
trap 'error_handler' ERR

ITEMS=
TEMP_ITEMS_FILE=
FILTER=""

usage() {
  echo "Usage: $(basename $0) <options>"
  echo
  echo "Arguments:"
  echo "  -h|--help            Show this help message and exit."
  echo "  -f|--filter          Provide a query to use as an fzf filter."
  echo
  echo "Commands:"
  echo "  session-token        Returns a usable Bitwarden session token."
}

function bootstrap_session_token() {
  local session_file="$DOTFILES_STATE_PATH/bw-session"

  if [[ ! -f "$session_file" ]]; then
    $DOTFILES_PATH/setup/unlock_bw
  fi

  if find "$session_file" -type f -mmin +60 | grep -q .; then
    rm $session_file
  fi
}

function session_token() {
  echo $(cat "$DOTFILES_STATE_PATH/bw-session")
}

function load_items() {
  local filter="$1"
  TEMP_ITEMS_FILE=$(mktemp)

  show_status "pending" "Loading items from vault(s) ... "

  if [[ -n "$filter" ]]; then
    if ! ITEMS=$(bw list items --search "$filter" --session "$(session_token)" 2>/dev/null); then
      show_status "error" "Could not load items or operation timed out."
      echo && exit 1
    fi
  else
    if ! ITEMS=$(bw list items --session "$(session_token)" 2>/dev/null); then
      show_status "error" "Could not load items or operation timed out."
      echo && exit 1
    fi
  fi

  show_status "ok" "Items loaded from vault(s)."
  echo "$ITEMS" >"$TEMP_ITEMS_FILE"
  echo
}

function main() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --filter)
      shift
      filter="$1"
      shift
      ;;
    session-token)
      echo $(cat "$DOTFILES_STATE_PATH/bw-session")
      exit 0
      ;;
    *)
      echo "$(cross) Invalid option: $1"
      usage
      exit 1
      ;;
    esac
  done

  ensure_brew_dependency "fzf"
  bootstrap_session_token
  load_items "$FILTER"

  jq -r '.[] | "\(.name) (\(.id)) \(.login.username)"' "$TEMP_ITEMS_FILE" | 
    FZF_PREVIEW_FILE="$TEMP_ITEMS_FILE" fzf \
    --cycle --inline-info --ansi --no-mouse --layout=reverse \
    --prompt="$(basename $0) -> " \
    --preview-window='right:50%' \
    --preview='
        if [[ "{}" == "HELP" ]]; then
          echo "$HELP_TEXT"
        else
          item_id=$(echo {} | sed -n "s/.*(\(.*\)).*/\1/p")
          item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "$FZF_PREVIEW_FILE")

          username=$(echo "$item" | jq -r ".login.username | @sh")
          password=$(echo "$item" | jq -r ".login.password | @sh")
          notes=$(echo "$item" | jq -r ".notes // empty | @sh")
          creationDate=$(echo "$item" | jq -r ".creationDate | @sh")
          revisionDate=$(echo "$item" | jq -r ".revisionDate | @sh")
          uris=$(echo "$item" | jq -r ".login.uris[].uri | @sh" | sed "s/^/- /")

          totp_available=$(echo "$item" | jq -r ".login.totp != null")

          if [ "$totp_available" = "true" ]; then
            clear
            totp_secret=$(echo "$item" | jq -r ".login.totp")
            if command -v oathtool &> /dev/null; then
              totp=$(oathtool --totp -b "$totp_secret")
            else
              totp=$(bw get totp "$item_id")
            fi
          else
            totp="No TOTP available for this login."
          fi

          bold=$(tput bold)
          normal=$(tput sgr0)
          cyan=$(tput setaf 6)
          red=$(tput setaf 1)

          printf "${bold}${cyan}username:${normal} %s\n" "$username"
          printf "${bold}${cyan}password:${normal} %s\n" "${red}$password${normal}"
          printf "${bold}${cyan}totp:${normal} %s\n" "$totp"
          printf "${bold}${cyan}notes:${normal} %s\n" "$notes"
          printf "${bold}${cyan}creationDate:${normal} %s\n" "$creationDate"
          printf "${bold}${cyan}revisionDate:${normal} %s\n" "$revisionDate"
          printf "${bold}${cyan}uris:${normal}\n%s" "$uris"
        fi
      '
}

# main() is isolated to allow for readability and easier testing.
main "$@"
