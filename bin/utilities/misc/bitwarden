#!/usr/bin/env bash
set -e

#
# A hub for my custom bitwarden utilities.
#
# Original idea blatantly stolen from ... someone. I rewrote it to fit better
# with what I want to do with my dotfiles, but can't remember or find the 
# original source. My apologies to the original author, you rock.
#

trap 'error_handler' ERR

usage() {
  echo
  echo "Usage: $(basename $0) [-h|--help] <command>"
  echo
  echo "Commands:"
  echo "  unlock               Unlocks your vault(s) with your master password."
  echo "  items                Load up your vault items in FZF."
  echo
  echo "Options:"
  echo "  -h|--help            Show this help message and exit."
  echo "  -f|--filter          Provide a query to use as an fzf filter."
}

# Fail early if no arguments are given.
[[ $# -eq 0 ]] && usage && exit 1

#############################################################################

items_cache_file() { echo "$DOTFILES_STATE_PATH/bw-items-cache"; }
mp() { utility bash decrypt -f "$mp_file"; }

#############################################################################

function unlock() {
  if [[ ! -f "$mp_file" ]]; then
    utility bash encrypt \
      -i $(utility bash prompt-user -m "$(pending) Enter your Bitwarden master password: ") \
      -o "$DOTFILES_STATE_PATH/bw-mp.enc"
  fi

  echo $(echo "$(mp)" | bw unlock --raw 2>/dev/null)
}

function cache-items() {
  local ITEMS
  utility bash print-status "Loading items from vault(s) ... "

  export BW_SESSION=$(unlock)

  if [[ -n "$filter" ]]; then
    if ! ITEMS=$(bw --session "$BW_SESSION" list items --search "$filter" 2>/dev/null); then
      utility bash print-status -i error "Could not load items or operation timed out."
      exit 1
    fi
  else
    if ! ITEMS=$(bw --session "$BW_SESSION" list items 2>/dev/null); then
      utility bash print-status -i error "Could not load items or operation timed out."
      exit 1
    fi
  fi

  utility bash print-status -n -i ok "Items loaded from vault(s)."

  tmp=$(mktemp)
  echo "$ITEMS" > $tmp
  utility bash encrypt -f "$tmp" -o "$ITEMS_CACHE_FILE.enc"
}

function items() {
  ensure_brew_dependency "fzf"
  [[ ! -f $ITEMS_CACHE_FILE.enc ]] && cache-items

  tmp=$(mktemp)
  echo "$(utility bash decrypt -f $ITEMS_CACHE_FILE.enc)" >> $tmp

  # So the preview code knows where to look.
  export SCRIPT_PATH="$(dirname $(realpath $0))"

  # You need to pass the jq queries for $item_id and $item here in order to
  # get the preview to work. It executes in a subshell, so it doesn't have
  # context of the variables you've set in the main shell.
  jq -r '.[] | "\(.name)\t(\(.id))\t\(.login.username)"' "$tmp" | 
    FZF_PREVIEW_FILE="$tmp" fzf \
    --cycle --inline-info --ansi --no-mouse --layout=reverse \
    --prompt="$(basename $0) -> " \
    --preview-window='right:50%' \
    --preview='
      item_id=$(echo {} | sed -n "s/.*(\(.*\)).*/\1/p")
      item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "$FZF_PREVIEW_FILE")
      source $SCRIPT_PATH/bitwarden_preview.sh
      '
}

#############################################################################

function main() {
  local ITEMS_CACHE_FILE=$(items_cache_file)
  local mp_file="$DOTFILES_STATE_PATH/bw-mp.enc"

  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --filter)
      shift
      filter="$1"
      shift
      ;;
    unlock | items)
      command="$1"
      shift
      ;;
    *)
      utility bash print-status -i error "Invalid option: $1"
      usage && exit 1
      ;;
    esac
  done

  $command
}

# main() is isolated to allow for readability and easier testing.
main "$@"
