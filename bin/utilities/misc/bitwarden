#!/usr/bin/env bash
set -e

#
# A hub for my custom bitwarden utilities.
#
# Original idea blatantly stolen from ... someone. I rewrote it to fit better
# with what I want to do with my dotfiles, but can't remember or find the 
# original source. My apologies to the original author, you rock.
#

[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh
trap 'error_handler' ERR

usage() {
  echo
  echo "Usage: $(basename $0) [-h|--help] <command>"
  echo
  echo "Commands:"
  echo "  session-token        Returns a usable Bitwarden session token."
  echo "  unlock               Unlocks your vault(s) with your master password."
  echo
  echo "Options:"
  echo "  -h|--help            Show this help message and exit."
  echo "  -f|--filter          Provide a query to use as an fzf filter."
}

function bootstrap_session_token() {
  local session_file="$DOTFILES_STATE_PATH/bw-session"

  if [[ ! -f "$session_file" ]]; then
    $DOTFILES_PATH/setup/unlock_bw
  fi

  if find "$session_file" -type f -mmin +60 | grep -q .; then
    rm $session_file
    bootstrap_session_token
    return
  fi
}

function items_cache_file() {
  echo $(cat "$DOTFILES_STATE_PATH/bw-items-cache")
}

function session_token() {
  echo $(cat "$DOTFILES_STATE_PATH/bw-session")
}

#
# openssl aes-256-cbc -pbkdf2 -e -a -k pras3Awr -in foo.txt -out foo.enc
# openssl aes-256-cbc -pbkdf2 -d -a -k pras3Awr -in foo.enc
# 
# openssl rand -base64 128
#
function cache_vault_items() {
  local filter="$1"
  ITEMS=
  export ITEMS_CACHE_FILE=$(mktemp)

  show_status "pending" "Loading items from vault(s) ... "

  if [[ -n "$filter" ]]; then
    if ! ITEMS=$(bw list items --search "$filter" --session "$(session_token)" 2>/dev/null); then
      show_status "error" "Could not load items or operation timed out."
      echo && exit 1
    fi
  else
    if ! ITEMS=$(bw list items --session "$(session_token)" 2>/dev/null); then
      show_status "error" "Could not load items or operation timed out."
      echo && exit 1
    fi
  fi

  show_status "ok" "Items loaded from vault(s)."
  echo "$ITEMS" >"$ITEMS_CACHE_FILE"
  openssl aes-256-cbc -a -salt -pbkdf2 -in $ITEMS_CACHE_FILE -out $ITEMS_CACHE_FILE.enc -k $DOTFILES_ENCRYPTION_KEY
  echo
}

function main() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --filter)
      shift
      filter="$1"
      shift
      ;;
    session-token)
      echo $(cat "$DOTFILES_STATE_PATH/bw-session")
      exit 0
      ;;
    unlock)
      bootstrap_session_token
      exit 0
      ;;
    *)
      show_status "error" "Invalid option: $1"
      usage
      exit 1
      ;;
    esac
  done

  ensure_brew_dependency "fzf"
  bootstrap_session_token
  cache_vault_items "$filter"

  # So the preview code knows where to look.
  export SCRIPT_PATH="$(dirname $(realpath $0))"

  # You need to pass the jq queries for $item_id and $item here in order to
  # get the preview to work. It executes in a subshell, so it doesn't have
  # context of the variables you've set in the main shell.
  jq -r '.[] | "\(.name)\t(\(.id))\t\(.login.username)"' "$ITEMS_CACHE_FILE" | 
    awk '$0=(NR>1?" ":"")$1":"$2' ORS= |
    FZF_PREVIEW_FILE="$ITEMS_CACHE_FILE" fzf \
    --cycle --inline-info --ansi --no-mouse --layout=reverse \
    --prompt="$(basename $0) -> " \
    --preview-window='right:50%' \
    --preview='
      item_id=$(echo {} | sed -n "s/.*(\(.*\)).*/\1/p")
      item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "$FZF_PREVIEW_FILE")
      source $SCRIPT_PATH/bitwarden_preview.sh
      '
}

# main() is isolated to allow for readability and easier testing.
main "$@"
