#!/usr/bin/env bash
set -e

#
# A hub for my custom bitwarden utilities.
#
# TODO:
# - The default functionality is a global fuzzy search.
#   Refactor that shit into separate commands 
#   search <term> -> new function search()
#   unlock -> bootstrap_session_token() basically
#
# - Add a way to copy a password straight to the clipboard
#
# - Smart item search so I can use it in the env_wizard
#

[[ -f $DOTFILES_PATH/bash/helpers.sh ]] && source $DOTFILES_PATH/bash/helpers.sh
trap 'error_handler' ERR

usage() {
  echo "Usage: $(basename $0) <options>"
  echo
  echo "Arguments:"
  echo "  -h|--help            Show this help message and exit."
  echo "  -f|--filter          Provide a query to use as an fzf filter."
  echo
  echo "Commands:"
  echo "  session-token        Returns a usable Bitwarden session token."
}

function bootstrap_session_token() {
  local session_file="$DOTFILES_STATE_PATH/bw-session"

  if [[ ! -f "$session_file" ]]; then
    $DOTFILES_PATH/setup/unlock_bw
  fi

  if find "$session_file" -type f -mmin +60 | grep -q .; then
    rm $session_file
    bootstrap_session_token
  fi
}

function session_token() {
  echo $(cat "$DOTFILES_STATE_PATH/bw-session")
}

function write_vault_items_to_temp_file() {
  local filter="$1"
  ITEMS=
  export TEMP_ITEMS_FILE=$(mktemp)

  show_status "pending" "Loading items from vault(s) ... "

  if [[ -n "$filter" ]]; then
    if ! ITEMS=$(bw list items --search "$filter" --session "$(session_token)" 2>/dev/null); then
      show_status "error" "Could not load items or operation timed out."
      echo && exit 1
    fi
  else
    if ! ITEMS=$(bw list items --session "$(session_token)" 2>/dev/null); then
      show_status "error" "Could not load items or operation timed out."
      echo && exit 1
    fi
  fi

  show_status "ok" "Items loaded from vault(s)."
  echo "$ITEMS" >"$TEMP_ITEMS_FILE"
  echo
}

function main() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --filter)
      shift
      filter="$1"
      shift
      ;;
    session-token)
      echo $(cat "$DOTFILES_STATE_PATH/bw-session")
      exit 0
      ;;
    *)
      echo "$(cross) Invalid option: $1"
      usage
      exit 1
      ;;
    esac
  done

  ensure_brew_dependency "fzf"
  bootstrap_session_token
  write_vault_items_to_temp_file "$filter"

  # So the preview code knows where to look.
  export SCRIPT_PATH="$(dirname $(realpath $0))"

  jq -r '.[] | "\(.name) (\(.id)) \(.login.username)"' "$TEMP_ITEMS_FILE" | 
    FZF_PREVIEW_FILE="$TEMP_ITEMS_FILE" fzf \
    --cycle --inline-info --ansi --no-mouse --layout=reverse \
    --prompt="$(basename $0) -> " \
    --preview-window='right:50%' \
    --preview='
      # You need to set the jq queries here in order to get a preview to work.
      # It does a funky thing with how it extracts data.
      item_id=$(echo {} | sed -n "s/.*(\(.*\)).*/\1/p")
      item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "$FZF_PREVIEW_FILE")
      source $SCRIPT_PATH/bitwarden_preview.sh
      '
}

# main() is isolated to allow for readability and easier testing.
main "$@"
