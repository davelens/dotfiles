#!/usr/bin/env bash

#
# A hub for my custom bitwarden utilities.
#
# Original idea blatantly stolen from ... someone. I rewrote it to fit better
# with what I want to do with my dotfiles, but can't remember or find the
# original source. My apologies to the original author, you rock.
#

name="bitwarden"

usage() {
  echo
  echo "Usage: $name [-h|--help] <command>"
  echo
  echo "Commands:"
  echo "  unlock               Unlocks your vault(s) with your master password."
  echo "  items                Load up your vault items in FZF."
  echo "  clear-cache          Clears the items cache."
  echo
  echo "Options:"
  echo "  -h|--help            Show this help message and exit."
  echo "  -f|--filter          Provide a query to use as an fzf filter."
}

# Fail early if no arguments are given.
[[ $# -eq 0 ]] && usage && exit 1

###############################################################################

items_cache_file() { echo "$DOTFILES_CACHE_HOME/bw-items-cache"; }

mp() { $decrypt -f "$mp_file"; }

prepare() {
  [[ ! -f $ITEMS_CACHE_FILE.enc ]] && cache-items

  tmp=$(mktemp)
  echo "$($decrypt -f $ITEMS_CACHE_FILE.enc)" >>$tmp

  # So the preview code knows where to look.
  echo $tmp
}

###############################################################################

unlock() {
  if [[ ! -f "$mp_file" ]]; then
    $encrypt \
      -i $($prompt_user -m "$(pending) Enter your Bitwarden master password: ") \
      -o "$DOTFILES_CACHE_HOME/bw-mp.enc"
  fi

  echo $(echo "$(mp)" | bw unlock --raw 2>/dev/null)
}

cache-items() {
  local ITEMS
  $print_status "Loading items from vault(s) ... "

  export BW_SESSION=$(unlock)

  if ! ITEMS=$(bw --session "$BW_SESSION" list items 2>/dev/null); then
    $print_status -i error "Could not load items or operation timed out."
    exit 1
  fi

  tmp=$(mktemp)
  echo "$ITEMS" >$tmp
  $encrypt -f "$tmp" -o "$ITEMS_CACHE_FILE.enc"

  $print_status -i ok "Items loaded from vault(s)."
}

items() {
  tmp=$(prepare)

  # You need to pass the jq queries for $item_id and $item here in order to
  # get the preview to work. It executes in a subshell, so it doesn't have
  # context of the variables you've set in the main shell.
  jq -r ".[] | \"\(.name)\t\(.id)\t\(.login.username)\"" "$tmp" |
    awk -F'\t' '{ printf "%-40s %-40s %-40s\n", $1, $3, $2}' |
    FZF_PREVIEW_FILE="$tmp" fzf \
      --cycle --inline-info --ansi --no-mouse --layout=reverse --height 30% --border $exact $query \
      --prompt="${prompt:-$name} -> " \
      --header="$(printf "%-40s %-40s %-40s\n" 'Item' 'Username' 'ID')" \
      --bind="enter:become(echo {2} | awk '{printf \$(NF-1)}')" \
      --bind="ctrl-u:execute(username=\$(echo {2} | awk '{printf \$(NF-1)}'); echo -n \"\$username\" | cb)+abort" \
      --bind="ctrl-y:execute(item_id=\$(echo -n {1..} | awk '{printf \$NF}'); password=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.password' \"$tmp\"); echo -n \"\$password\" | cb)+abort" \
      --preview-window='right:50%' \
      --preview='
      item_id=$(echo -n {1..} | awk "{printf \$NF}")
      item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "$FZF_PREVIEW_FILE")
      source $SCRIPT_PATH/bitwarden_preview.sh
      '
}

identities() {
  tmp=$(prepare)

  # You need to pass the jq queries for $item_id and $item here in order to
  # get the preview to work. It executes in a subshell, so it doesn't have
  # context of the variables you've set in the main shell.
  jq -r ".[] | select(.identity != null) | .identity.firstName + \" \" + .identity.lastName" "$tmp" |
    FZF_PREVIEW_FILE="$tmp" fzf \
      --cycle --inline-info --ansi --no-mouse --layout=reverse --height 30% --border $exact $query \
      --prompt="${prompt:-$name} -> "
}

clear-cache() {
  rm -f $ITEMS_CACHE_FILE.enc
  $print_status -i ok "Items cache cleared."
}

###############################################################################

main() {
  ensure_brew_dependency "fzf"

  local ITEMS_CACHE_FILE=$(items_cache_file)
  local mp_file="$DOTFILES_CACHE_HOME/bw-mp.enc"
  local exact rest query prompt

  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -e | --exact)
      exact="-e"
      shift
      ;;
    -q | --query)
      shift
      query="-q $1"
      shift
      ;;
    -f | --filter)
      shift
      filter="$1"
      shift
      ;;
    -p | --prompt)
      shift
      prompt="$1"
      shift
      ;;
    unlock | items | identities | clear-cache)
      command="$1"
      shift
      ;;
    *)
      if [[ -z $command ]]; then
        $print_status -i error "Invalid option: $1"
        usage && exit 1
      fi

      rest="$@"
      break
      ;;
    esac
  done

  export SCRIPT_PATH="$(dirname $(realpath $0))"
  $command
}

###############################################################################
unset name
main "$@"
