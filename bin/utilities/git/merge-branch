#!/usr/bin/env bash

# Beware that this will clean up remaining local and remote branches 
# post-merge if you choose to push the target branch.

# Stops further execution after any error.
set -e
[[ -f ${DOTFILES_PATH}/bash/commands ]] && . ${DOTFILES_PATH}/bash/commands
[[ ! -d .git ]] && fail "ERROR: Local working directory is not a git repo."

branch_name=$(git b) # `git b` is an alias in my ~/.gitconfig
if [[ -z $branch_name ]]; then
  echo "ERROR: No command 'git b' found."
  echo "Grab it here: https://github.com/davelens/dotfiles/blob/master/gitconfig#L8"
  exit
fi

if [[ $# -eq 0 ]]; then
  read -p "To which branch would you like to merge $branch_name? (default: develop) " target
  [[ -z $target ]] && target="develop"
else
  target="$1"
fi

git checkout $target
git merge --no-ff $branch_name

push_and_clean_up() {
  git push origin $target
  echo "Branch $target pushed to remote."
  git branch -d $branch_name
  echo "Local branch $branch_name removed."
  git push origin :$branch_name
  echo "Remote branch $branch_name removed."

  # Cleaning up files made by `git pr-body`.
  [[ -f .git/$branch_name.md ]] && rm .git/$branch_name.md
}

while true; do
  read -n1 -p "Do you want to push to the remote $target branch? " yn
  printf "\n"
  case $yn in
    [Yy]* ) push_and_clean_up; break;;
    [Nn]* ) exit;;
    * ) echo "Please answer `tput smul`Y`tput rmul`es or `tput smul`N`tput rmul`o.";;
  esac
done

echo "$branch_name merged into $target."
