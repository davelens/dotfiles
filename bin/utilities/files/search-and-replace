#!/usr/bin/env bash
set -e
[[ -f ~/.bash/commands ]] && . ~/.bash/commands

# This search and replace script uses ripgrep (rg) to find text in 
# files, and sed to replace the text in each matching file.
# I chose to use ripgrep, as it's fast and respects the .gitignore.

# Check if exactly two arguments are provided
[[ $# -lt 2 ]] && fail "Usage: `basename $0` <query> <replacement> [<files>...]"

query="$1"
replacement="$2"
files="$3"

# Prompt user for confirmation before making changes
read -p "Are you sure you want to replace all occurrences of '$query' with '$replacement'? (y/n): " response
[[ "$response" != "y" ]] && exit

# Perform a dry run first to show matching files and occurrences
echo "Dry run (showing matches only):"
rg --files-with-matches "$query" $files | xargs -I {} rg "$query" {}

echo
read -p "Proceed with replacements? (y/n): " final_response
[[ "$final_response" != "y" ]] && exit

rg --files-with-matches "$query" $files | while read -r file; do
  # Use sed to replace the text in each matching file
  sed -i.bak "s/$query/$replacement/g" "$file" && echo "Replaced in $file"
done

echo "Replacement complete. Backups of original files have '.bak' extension."

