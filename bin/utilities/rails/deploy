#!/usr/bin/env bash

# This deploy script is made with a particular workflow in mind. It behaves
# differently depending on what branch I'm on. Examples:
#
# Active branch: feature-specs
#       Command: deploy
#        Result: bundle exec cap production deploy BRANCH=feature-specs
#
# Active branch: feature-specs
#       Command: deploy -s
#        Result: bundle exec cap staging deploy BRANCH=feature-specs
#
# Active branch: develop
#       Command: deploy
#        Result: bundle exec cap production deploy
#
# Active branch: master
#       Command: deploy
#        Result: bundle exec cap production deploy
#
# Active branch: develop
#       Command: deploy -b develop
#        Result: bundle exec cap production deploy BRANCH=develop
#
# Active branch: master
#       Command: deploy -b master
#        Result: bundle exec cap production deploy BRANCH=master

# Stops further execution after any error.
set -e
[[ -f ~/.bash/commands ]] && . ~/.bash/commands

if [[ ! -f config.ru && ! -f spec/dummy/config.ru ]]; then
  fail "[rails/deploy] ERROR: You can only run this from a folder containing a Rails project."
fi

if [[ ! -f Capfile && ! -f Capfile.rb ]]; then
  fail "[rails/deploy] ERROR: No Capfile found."
fi

branch_name=$(git b) # `git b` is an alias in my ~/.gitconfig
lock_users=0
env=production
docker_prefix=

# Make sure ssh-agent adds our default SSH key.
[[ -z `ssh-add -l` ]] && ssh-add

for i in "$@"
do
  case $i in
    -s|--staging)
      env=staging
      ;;
    -L|--lock-users)
      lock_users=1
      ;;
    -p|--production)
      env=production
      ;;
    -b=*|--branch=*)
      branch_name="${i#*=}"
      ;;
    --docker)
      eval `ssh-agent -s`
      ssh-add
      docker_prefix="docker-compose run --rm -v $SSH_AUTH_SOCK:/tmp/ssh-agent.sock -e SSH_AUTH_SOCK=/tmp/ssh-agent.sock rails"
      ;;
    *)
      # unknown options
      echo "[rails/deploy] ERROR: Unknown option '${i}'"
      echo "Usage: deploy [-spbL] [--docker] [--staging] [--production] [--lock-users]"
      printf "\t[-b=branch] [--branch=branch]\n"
      exit
      ;;
  esac
done

if [[ ! -z $docker_prefix ]]; then
  cmd="$docker_prefix sh -c 'bundle config set --local path .bundle && bundle && bundle exec cap $env deploy'"
else
  cmd="bundle exec cap $env deploy"
fi

[[ $branch_name != 'develop' && $branch_name != 'master' ]] && cmd="${cmd} BRANCH=$branch_name"

[[ $lock_users == 1 ]] && cmd="${cmd} LOCK_USERS=1"

while true; do
  printf "[rails/deploy] I want to run:\n\n"
  printf "  ${cmd}\n\n"
  read -n1 -p "[rails/deploy] Confirm? (y/n) " yn
  echo ""
  case $yn in
    [Yy]* ) eval $cmd; break;;
    [Nn]* ) exit;;
    * ) echo "Please answer `tput smul`Y`tput rmul`es or `tput smul`N`tput rmul`o.";;
  esac
done
