#!/usr/bin/env bash
set -e

# Extracts the SSH user/server pair from Capistrano's config files,
# And prints out syntax for a bash associative array.
#
# It checks two files for these lines:
#
# 1. config/deploy.rb
#
#   set :user, 'website'
#   set :server, 'raamwinkel.blimp.be'
#
# 2. config/deploy/production.rb
#
#   server '10.13.1.23', user: 'reli', roles: %w{app web db}
#
# It doesn't matter in which order they occur.

extract_from_main_deploy_file() {
  file="config/deploy.rb"
  [ ! -f "$file" ] && fail "ERROR: $file not found. Check its path."
  grep -Eo "set :$1, ['\"][^'\"]+['\"]" "$file" |
    sed -E "s/set :$1, ['\"]([^'\"]+)['\"]/\1/"
}

extract_from_deploy_env_file() {
  file="config/deploy/production.rb"
  [ ! -f "$file" ] && fail "ERROR: $file not found. Check its path."
  grep -Eo "$1:? ['\"][^'\"]+['\"]" "$file" |
    sed -E "s/$1:? ['\"]([^'\"]+)['\"]/\1/"
}

###############################################################################

main() {
  ssh_user="$(extract_from_main_deploy_file user)"
  ssh_domain="$(extract_from_main_deploy_file server)"

  if [[ -z "$ssh_user" || -z "$ssh_domain" ]]; then
    ssh_user="$(extract_from_deploy_env_file user)"
    ssh_domain="$(extract_from_deploy_env_file server)"
  fi

  [[ -z $ssh_user || -z $ssh_domain ]] && fail "ERROR: No workable user/server pair found. Aborting."

  printf '(["user"]="%s" ["server"]="%s")\n' $ssh_user $ssh_domain
  unset ssh_user ssh_domain file
}

main "$@"
