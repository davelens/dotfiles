#!/usr/bin/env bash

# This deploy script is made with a particular workflow in mind. It behaves
# differently depending on what branch I'm on. Examples:
#
# Active branch: feature-specs
#       Command: deploy
#        Result: bundle exec cap production deploy BRANCH=feature-specs
#
# Active branch: feature-specs
#       Command: deploy -s
#        Result: bundle exec cap staging deploy BRANCH=feature-specs
#
# Active branch: develop
#       Command: deploy
#        Result: bundle exec cap production deploy
#
# Active branch: master
#       Command: deploy
#        Result: bundle exec cap production deploy
#
# Active branch: develop
#       Command: deploy -b develop
#        Result: bundle exec cap production deploy BRANCH=develop
#
# Active branch: master
#       Command: deploy -b master
#        Result: bundle exec cap production deploy BRANCH=master

# Stops further execution after any error.
set -e

branch_name=$(git b) # `git b` is an alias in my ~/.gitconfig
env=production

[[ $1 =~ "s" ]] && env=staging

if [[ $1 =~ "b" && -n $2 ]]; then
  CMD="bundle exec cap $env deploy BRANCH=$2"
elif [[ $branch_name != 'develop' && $branch_name != 'master' ]]; then
  CMD="bundle exec cap $env deploy BRANCH=$branch_name"
fi

[[ -z $CMD ]] && CMD="bundle exec cap $env deploy"

while true; do
  printf "[rails/deploy] I want to run:\n\n"
  printf "  ${CMD}\n\n"
  read -n1 -p "[rails/deploy] Confirm? (y/n) " yn
  echo ""
  case $yn in
    [Yy]* ) eval $CMD; break;;
    [Nn]* ) exit;;
    * ) echo "Please answer `tput smul`Y`tput rmul`es or `tput smul`N`tput rmul`o.";;
  esac
done
