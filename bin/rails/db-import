#!/usr/bin/env bash

set -e
[[ -f ~/.bash/commands ]] && . ~/.bash/commands
me=rails/`basename "$0"`

app=.
env=production
ignore_tables=
docker_prefix=
mysql='mysql' # TODO: fix a .my.cnf for Docker

function spinner() {
  echo "[$me] $1"
}

for i in "$@"
do
  case $i in
    --app=*)
      app="${i#*=}"
      ;;
    -i=*|--ignore-data=*)
      ignore_tables="${i#*=}"
      ;;
    --docker)
      docker_prefix="docker-compose run --rm rails"
      ;;
    -l|--local-database=*)
      local_db="${i#*=}"
      ;;
    -t|--test)
      env=test
      ;;
    -s|--staging)
      env=staging
      ;;
    -p|--production)
      env=production
      ;;
    -r=*|--remote-database=*)
      remote_db="${i#*=}"
      ;;
    *)
      # unknown options
      echo "[$me] ERROR: Unknown option '${i}'"
      echo "Usage: db-import [-sptrli] [--test] [--staging] [--production] [--docker]"
      printf "\t[--app=path]\n"
      printf "\t[-l=name] [--local-database=name]\n"
      printf "\t[-r=name] [--remote-database=name]\n"
      printf "\t[-i=tables] [--ignore-data=tables]\n"
      exit
      ;;
  esac
done

[[ ! -f $app/config.ru ]] && fail "[$me] ERROR: You can only run this from a folder containing a Rails project."
[[ ! -f $app/config/database.yml ]] && ~/.bin/rails/bootstrap $app

[[ ! -d $app/db/dump ]] && mkdir -p $app/db/dump

[[ -z ${remote_db} ]] && remote_db=$(~/.bin/rails/lookup-db-credentials -p --key=database --app=$app)
[[ -z ${local_db} ]] && local_db=$(~/.bin/rails/lookup-db-credentials --key=database --app=$app)
[[ -z ${local_db} ]] && fail "[$me] ERROR: No local configuration found in $app/config/database.yml. Aborting."

if [[ -z ${remote_db} ]]; then
  printf "[$me] WARNING: No configuration for ${env} found in config/database.yml!\n"
  # TODO: Make the default smarter (first 8 chars of project name + "_prod"?).
  read -p "[$me] Please enter the name of the remote database: (default: website_prod) " remote_db
  [[ -z ${remote_db} ]] && remote_db="website_prod"
fi

readarray -d , -t ignore_tables <<<"$ignore_tables" # Bash 4.x+

ignored_tables_string=""
for table in "${ignore_tables[@]}"
do :
   ignored_tables_string+=" --ignore-table=${remote_db}.${table}"
done

declare -A ssh_credentials=$(~/.bin/rails/ssh-credentials $app/config/deploy.rb)
user=${ssh_credentials[user]}
server=${ssh_credentials[server]}

spinner "[${user}@${server}] Dumping ${remote_db}..."
(
ssh ${user}@${server} \
  "mysqldump ${remote_db} --no-tablespaces --single-transaction --no-data --routines > dump.sql && \
   mysqldump ${remote_db} --no-tablespaces --no-create-info --skip-triggers ${ignored_tables_string//[$'\t\r\n']} >> dump.sql && tar -cvzf dump.sql.tar dump.sql"
) >/dev/null

spinner "[${user}@${server}] Downloading dump.sql.tar"
scp ${user}@${server}:dump.sql.tar $app/db/dump/.

spinner "Unpacking dump.sql.tar"
tar -C $app/db/dump/ -xvf $app/db/dump/dump.sql.tar >/dev/null 2>&1

test_database=$(~/.bin/rails/lookup-db-credentials -t --key=database --app=$app)

$docker_prefix $mysql -e "drop database if exists ${local_db}"
$docker_prefix $mysql -e "drop database if exists $test_database"
$docker_prefix $mysql -e "create database ${local_db}"
$docker_prefix $mysql -e "create database $test_database"

spinner "Importing dump.sql into ${local_db}"
$docker_prefix $mysql ${local_db} -e "source $app/db/dump/dump.sql"

spinner "Importing dump.test.sql into $test_database"
# "db" here will dynamically fill in the service worker's IP address.
# It resolves to something like 172.18.0.2
$docker_prefix mysqldump -h db --no-data ${local_db} > $app/db/dump/dump.test.sql
$docker_prefix mysqldump -h db ${local_db} schema_migrations > $app/db/dump/migrations.test.sql
$docker_prefix $mysql $test_database -e "source $app/db/dump/dump.test.sql"
$docker_prefix $mysql $test_database -e "source $app/db/dump/migrations.test.sql"

spinner "[${user}@${server}] Cleaning up"
ssh ${user}@${server} 'rm -f dump.sql dump.sql.tar'

spinner "Cleaning up"
rm -f $app/db/dump/*
