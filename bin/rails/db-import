#!/usr/bin/env bash

set -e
[[ -f ~/.bash/commands ]] && . ~/.bash/commands
me=rails/`basename "$0"`

function credentials(){
  echo $(~/.bin/rails/lookup-db-credentials $1 $2)
}

function spinner() {
  revolver update "[$me] $1"
}

[[ ! -f config.ru ]] && fail "[$me] ERROR: You can only run this from a folder containing a Rails project."
[[ ! -f config/database.yml ]] && ~/.bin/rails/bootstrap $PWD

[[ ! -d db/dump ]] && mkdir -p db/dump

env=production
remote_db=$(credentials -p database)
local_db=$(credentials database)
ignore_tables=
docker_prefix=
mysql='mysql' # TODO: fix a .my.cnf for Docker

# TODO: Be able to override user+host.

revolver start "$me "

for i in "$@"
do
  case $i in
    -i=*|--ignore-data=*)
      ignore_tables="${i#*=}"
      ;;
    --docker)
      docker_prefix="docker-compose exec -T rails"
      ;;
    -l|--local-database=*)
      local_db="${i#*=}"
      ;;
    -t|--test)
      env=test
      remote_db=$(credentials -t database)
      ;;
    -s|--staging)
      env=staging
      remote_db=$(credentials -s database)
      ;;
    -p|--production)
      env=production
      remote_db=$(credentials -p database)
      ;;
    -r=*|--remote-database=*)
      remote_db="${i#*=}"
      ;;
    *)
      # unknown options
      echo "[$me] ERROR: Unknown option '${i}'"
      echo "Usage: db-import [-sptrli] [--test] [--staging] [--production]"
      printf "\t[-l=name] [--local-database=name]\n"
      printf "\t[-r=name] [--remote-database=name]\n"
      printf "\t[-i=tables] [--ignore-data=tables]\n"
      revolver stop
      exit
      ;;
  esac
done

[[ -z ${local_db} ]] && fail "[$me] ERROR: No local configuration found in config/database.yml. Aborting."

if [[ -z ${remote_db} ]]; then
  printf "[$me] WARNING: No configuration for ${env} found in config/database.yml!\n"
  # TODO: Make the default smarter (first 8 chars of project name + "_prod"?).
  read -p "[$me] Please enter the name of the remote database: (default: website_prod) " remote_db
  [[ -z ${remote_db} ]] && remote_db="website_prod"
fi

readarray -d , -t ignore_tables <<<"$ignore_tables" # Bash 4.x+

ignored_tables_string=""
for table in "${ignore_tables[@]}"
do :
   ignored_tables_string+=" --ignore-table=${remote_db}.${table}"
done

declare -A ssh_credentials=$(~/.bin/rails/ssh-credentials)
user=${ssh_credentials[user]}
server=${ssh_credentials[server]}

spinner "[${user}@${server}] Dumping ${remote_db}..."
(
ssh ${user}@${server} \
  "mysqldump ${remote_db} --no-tablespaces --single-transaction --no-data --routines > dump.sql && \
   mysqldump ${remote_db} --no-tablespaces --no-create-info --skip-triggers ${ignored_tables_string//[$'\t\r\n']} >> dump.sql && tar -cvzf dump.sql.tar dump.sql"
) >/dev/null

spinner "[${user}@${server}] Downloading dump.sql.tar"
scp ${user}@${server}:dump.sql.tar db/dump/.

spinner "Unpacking dump.sql.tar"
tar -C db/dump/ -xvf db/dump/dump.sql.tar >/dev/null 2>&1

$docker_prefix $mysql -e "drop database if exists ${local_db}"
$docker_prefix $mysql -e "drop database if exists $(credentials -t database)"
$docker_prefix $mysql -e "create database ${local_db}"
$docker_prefix $mysql -e "create database $(credentials -t database)"

spinner "Importing dump.sql into ${local_db}"
`$docker_prefix $mysql ${local_db} < db/dump/dump.sql`

spinner "Importing dump.test.sql into $(credentials -t database)"
$docker_prefix mysqldump --no-data ${local_db} > db/dump/dump.test.sql
$docker_prefix mysqldump ${local_db} schema_migrations > db/dump/migrations.test.sql
`$docker_prefix $mysql $(credentials -t database) < db/dump/dump.test.sql`
`$docker_prefix $mysql $(credentials -t database) < db/dump/migrations.test.sql`

spinner "[${user}@${server}] Cleaning up"
ssh ${user}@${server} 'rm -f dump.sql dump.sql.tar'

spinner "Cleaning up"
rm -f db/dump/*
