#!/bin/bash

# This command can be run with `git pr-body` (set in ~/.gitconfig)

# It's purpose is simply to allow you to keep a local version of the GitHub PR
# body message. I often include todos in there, and it's handy to edit them
# locally. The command has these features:
#
# * It automatically installs Github's CLI tool if you don't have it yet.
# * It does not require authentication with GitHub's API thanks to `hub`.
# * It uses the existing PR body as a base for further updates.
# * It keeps the writing buffer in .git/ so it's automatically ignored by git.
# * It asks to push the updated body to the GitHub website.
# * It returns a link to the PR as the command finishes.
#
# Note that `hub` will be deprecated somewhere in the future. I'm assuming
# GitHub's CLI tool will be expanded with API functionality, and I will switch
# out the current API calls made with `hub` when that time comes.

# Stops further execution after any error.
set -e

if [ ! -d ".git" ]; then
  echo "EXIT: Local working directory is not a cloned git repo."
  exit
fi

# ~/.bash/commands includes my git_branch function.
[ -f ~/.bash/commands ] && . ~/.bash/commands

if [ $# -eq 0 ]; then
  # No longer using `which` after reading the following:
  # https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script
  if [ `command -v git_branch` ]; then
    branch_name=`git_branch`
  else
    read -p "For which branch would you like to edit the pull request body? " branch_name
    [[ ! `git branch | grep $branch_name` ]] && echo "$branch_name is not a git branch." && exit
  fi
else
  branch_name="$1"
fi

[ ! `command -v gh` ] && brew install github/gh/gh

# An easier way to grab the PR URL would be `hub pr show -u`. I chose to use
# a method using `gh` instead because of hub's pending deprecation.
repo_suffix=`git remote get-url origin | sed -e 's/git@github.com://' -e 's/.git//'`
pr_id=`gh pr list | grep $branch_name | awk '{print $1}'`
body_file=".git/$branch_name.md"

# Stop here if there's no PR available for the current branch.
if [ ! $pr_id ]; then
  echo "No pull requests exist for branch $branch_name in $repo_suffix."
  exit
fi

# Prefill our buffer with the existing PR body.
if [ ! -f ".git/$branch_name.md" ]; then
  echo "Creating .git/$branch_name.md"
  [ -f output.json ] && rm output.json
  hub api https://api.github.com/repos/$repo_suffix/pulls/$pr_id > output.json
  ruby -rjson -e 'j = JSON.parse(File.read("output.json"));puts j["body"]' > .git/$branch_name.md
  rm output.json
fi

# Storing the PR body locally, using the name of the branch. Commit it or add it
# to your .gitignore.
vim ".git/$branch_name.md"

# If for some reason you end up removing the file at this point, we just exit.
[ ! -f ".git/$branch_name.md" ] && exit

echo ""
echo "*********************************<BODY CONTENT>**********************************"
cat .git/$branch_name.md
echo "*********************************</BODY CONTENT>*********************************"
echo ""

while true; do
  read -n1 -p "Push to GitHub? (y/n) " yn
  case $yn in
    # I sort of have to use `hub` here instead of plain `curl` to prevent
    # authenticating every time you call this command. As soon as GitHub CLI
    # supports API calls with built-in auth, I will switch to that.
    [Yy]* ) echo "" && hub api -X PATCH -F body="$(cat .git/$branch_name.md)" https://api.github.com/repos/$repo_suffix/pulls/$pr_id >/dev/null && echo "https://github.com/$repo_suffix/pull/$pr_id"; break;;
    [Nn]* ) echo "" && exit;;
    * ) echo "" && echo "Please answer `tput smul`Y`tput rmul`es or `tput smul`N`tput rmul`o.";;
  esac
done
