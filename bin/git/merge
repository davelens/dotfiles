#!/usr/bin/env bash

# gm stands for `git merge`.

# Stops further execution after any error.
set -e

if [ ! -d ".git" ]; then
  echo "EXIT: Local working directory is not a cloned git repo."
  exit
fi

# ~/.bash/commands includes my git_branch function.
[ -f ~/.bash/commands ] && . ~/.bash/commands

# No longer using `which` after reading the following:
# https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script
if [ `command -v git_branch` ]; then
  branch_name=`git_branch`
else
  echo "EXIT: No git_branch command found."
  echo "You can grab one here: https://github.com/davelens/dotfiles/blob/master/bash/commands#L13"
  exit
fi

if [ $# -eq 0 ]; then
  read -p "To which branch would you like to merge $branch_name? (default: develop) " target
  [ ! $target ] && target="develop"
else
  target="$1"
fi

git checkout $target
git merge --no-ff $branch_name

push_and_clean_up() {
  git push origin $target
  echo "Branch $target pushed to remote."
  git branch -d $branch_name
  echo "Local branch $branch_name removed."
  git push origin :$branch_name
  echo "Remote branch $branch_name removed."

  # Cleaning up files made by `git pr-body`.
  [ -f .git/$branch_name.md ] && rm .git/$branch_name.md
}

while true; do
  read -p "Do you want to push to the remote $target branch? " yn
  case $yn in
    [Yy]* ) push_and_clean_up; break;;
    [Nn]* ) exit;;
    * ) echo "Please answer `tput smul`Y`tput rmul`es or `tput smul`N`tput rmul`o.";;
  esac
done

echo "$branch_name merged into $target."
