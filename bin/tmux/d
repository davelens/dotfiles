#!/usr/bin/env bash

# This opens a tmux session with a number of window/pane presets in order to
# do **d**ev work on a project.
#
#   d davelens/dotfiles
#
# It assumes a very specific folder structure; a github repository namespace
# insides the ~/Sites folder. An example:
#
#   ~/Sites/<git-org-or-user>/<git-repo>
#
# All my dev work-related and personal projects reside on GitHub.  It makes
# sense for me to follow the same user/repo structure, as it allows me to
# separate my professional projects from my personal ones.
#
# ~/Sites as my top level project folder because I mainly work on webapps, and
# it's the macos default for them.
#
# As an afterthought; Yes, I'm aware of tmuxinator and yes, I've tried it.
# I don't know, I still like a simple bash script better.

if [[ -z $1 ]]; then
  echo 'ERROR: No project namespace given.'
  printf "\tUsage: p <github-user>/<github-repo>"
fi

destination=~/Sites/$1
# Clone the git repo, fail with error output from `git clone`.
[[ ! -d $destination ]] && (bootstrap=1;git clone git@github.com:$1.git $destination || fail)

function rails_windows() {
  tmux new-window -n db -t $1
  tmux new-window -n console -t $1
  tmux new-window -n server -t $1

  # TODO: Start mysql server if it's not running.

  tmux send-keys -t $1:db "cd $destination && clear && mysql \$(~/.bin/rails/lookup-db-credentials database)" C-m
  tmux send-keys -t $1:console "cd $destination && clear && bin/rails c" C-m

  # TODO: Ask to start server or not.
  tmux send-keys -t $1:server "cd $destination && clear && bin/rails s"
}

tmux attach -t $1 || (
  tmux new-session -s $1 -n editor -d
  tmux send-keys -t $1 "cd $destination && clear && vim" C-m

  if [[ -f $destination/config.ru ]]; then
    if [[ $bootstrap == 1 ]]; then
      echo TODO: Create missing config/{database,secrets,project}.yml
    fi

    rails_windows $1
  fi

  tmux attach -d -t $1
)
