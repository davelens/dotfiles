#!/bin/bash

# creates an SSH key and uploads it to the given host
configure_ssh_host()
{
	username=$1
	hostname=$2
	identifier=$3
	keyfile=$4

	if [[ "$identifier" == "" ]] || [[ "$username" == "" ]] || [[ "$hostname" == "" ]] || [[ "$keyfile" == "" ]]
	then
		echo "usage: configure_ssh_host <username> <hostname> <identifier> <keyfile>"
	else
		ssh-keygen -f ~/.ssh/$keyfile.id_rsa -C "$USER $(date +'%Y/%m%/%d %H:%M:%S')"

		echo -e "Host $identifier\n\tHostName $hostname\n\tUser $username\n\tIdentityFile ~/.ssh/$keyfile.id_rsa" >> ~/.ssh/config

		ssh $identifier 'mkdir -p .ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/$keyfile.id_rsa.pub

		tput bold; ssh -o PasswordAuthentication=no $identifier true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0

		ssh_load_autocomplete
	fi
}

# Command used to test rest services that are under development
curlrest()
{
	method=$1
	url=$2
	parameters=$3

	if [[ "$method" == "" ]] || [[ "$url" == "" ]]
	then
		echo "usage: curlrest <method> <url> <*parameters>"
	else
		if [[ "$parameters" != "" ]]
		then
			parameters="--data-urlencode $(echo $parameters | xargs | sed 's/&/ --data-urlencode /g')"
		fi

		curl -v --globoff --get -X$method $url $parameters
		echo ""
	fi
}

# recursively moves all files matching the search query to the chosen directory
move_files()
{
	search=$1
	destination=$2

	if [[ "$search" == "" ]] || [[ "$destination" == "" ]]
	then
		echo "usage: gather_files <search> <destination>"
	else
		find . -type f -name "$search" -exec mv -fv '{}' "$destination" ';'
	fi
}

# returns the active git branch - this is used in rewrite_prompt()
git_branch()
{
	git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(branch: \1)/'
}

# get filesize
get_filesizes()
{
	ls -laSh | grep -v ^d | awk '{print $5 "\t" $9}'
}

# performs a mysqldump and creates a tarball through SSH, and stores it in the "backups" folder on your desktop
get_sql_dump()
{
	project=$1
	ssh_hostname=$2
	mysql_database=$3
	mysql_username=$4
	mysql_host=$5
	datefolder=$(date +'%d-%m')

	if [[ $project == "" ]] || [[ $ssh_hostname == "" ]] || [[ $mysql_database == "" ]]
	then
		echo "usage: get_sql_dump <project> <ssh_hostname> <mysql_database> <*mysql_username> <*mysql_host>"
	else
		if [[ $mysql_username != "" ]]
		then
			mysql_username="-u $mysql_username -p "
		fi

		if [[ $mysql_host != "" ]]
		then
			mysql_host=" -h $mysql_host"
		fi

		# Prepare the backup dir if it does not exist yet
		backup_dir=${HOME}/Desktop/backups/$project/$datefolder
		if [[ ! -d $backup_dir ]]
		then
		    echo "Creating backup dir ($backup_dir)"
    		mkdir -p $backup_dir
		fi

		# Give the user a warning if the file already exists
		if [[ -f $backup_dir/$ssh_hostname.tar ]]
		then
		    echo -e "WARNING: Backup file already exists ($backup_dir/$ssh_hostname.tar).\nContinue? (y/n)"
		    read proceed

		    if [[ $proceed != "y" ]]
		    then
		    	echo "Exiting..."
		    	return
		    fi
		fi

		# Because the scope of all our vars is local, we have to put them in a backticked string to execute them with parsed vars
		echo "Executing mysqldump on the server..."
		prepare_dump=`ssh $ssh_hostname "mysqldump $mysql_username$mysql_database$mysql_host > $ssh_hostname.sql" > /dev/null`

		# create the tarball
		echo "Creating tarball..."
		create_tarball=`ssh $ssh_hostname "tar -cvzf $ssh_hostname.tar $ssh_hostname.sql && rm $ssh_hostname.sql" > /dev/null`

		# Prepare the backup dir and transfer the tarball
		echo "Transferring tarball to $backup_dir/$ssh_hostname.tar"
		scp $ssh_hostname:$ssh_hostname.tar $backup_dir/$ssh_hostname.tar > /dev/null

		# See the comments above
		echo "Cleaning up the server..."
		clear_server=`ssh $ssh_hostname "rm $ssh_hostname.tar"`

		cd $backup_dir
		echo "Done."
	fi
}

# replaces a local mysql database with the specified one
mysql_replace()
{
	database=$1
	sql_file=$2

	if [[ "$database" == "" ]] || [[ "$sql_file" == "" ]]
	then
		echo "usage: mysql_replace <database> <sql_file>"
	else
		echo "Dropping and re-creating database '$database'"
		mysql $database -e "drop database $database; create database $database;"

		echo "Importing $sql_file ..."
		mysql $database < $sql_file

		echo "Done."
	fi
}

# export all changed files between the given revision and HEAD, to a given location
svn_export_changed_files()
{
	tarfile=$1
	start_rev=$2
	end_rev=$3

	if [[ "$end_rev" == "" ]]; then
		 end_rev='HEAD'
	fi

	if [[ "$tarfile" == "" ]] || [[ "$start_rev" == "" ]]
	then
		echo "usage: svn_export_changed_files <tarfile> <start_rev> <*end_rev>"
	else
		svn diff -r "$start_rev":"$end_rev" --summarize |
		awk '{if ($1 != "D") print $2}'|
		xargs  -I {} tar -rvf "$tarfile" {}
	fi
}

# takes a screenshot and uploads it to my hosting
take_screenshot()
{
	filename="$(date +%Y-%m-%d-%H-%M-%S).png"

	screencapture -ix ~/Desktop/$filename &&
	scp ~/Desktop/$filename davelens.be:screenshots/$filename
	echo "http://code.davelens.be/screenshots/$filename" | pbcopy
	rm -rf ~/Desktop/$filename
}

toggle_default()
{
	environment=$1
	setting=$2
	value="$(defaults read com.apple.$environment $setting)"

	if [[ $value == 0 ]]; then
		newValue="TRUE"
	else
		newValue="FALSE"
	fi

	defaults write com.apple.$environment $setting -bool $newValue
	killall Finder
	echo "$setting is now $newValue."
}

# syncs git production and staging branch with master
git_sync_with_master()
{
	git checkout production && git merge origin/master && git push origin production
	git checkout staging && git merge origin/master && git push origin staging
	git checkout master
}

# attempts to recursively find a match for a given string in the given file(s)
search()
{
	string=$1
	files=$2

	if [[ $string == '' ]];
	then
		echo "usage: search <search> '<*glob_expansion>'"
		echo "	Make sure the glob expansion is in quotes!"
	else
		if [[ $files == '' ]];
		then
			find . -type f -exec grep -l "$string" {} +
		else
			find . -type f -name "$files" -exec grep -l "$string" {} +
		fi
	fi
}

# attempts to recursively search the given range of files for a given perl-compatible regex and replace with a given value
search_and_replace()
{
	search=$1
	replace=$2
	files=$3

	if [[ $search == '' ]] || [[ $replace == '' ]];
	then
		echo "usage: search_and_replace <search> <replace <*glob_expansion>"
		echo "	Make sure the glob expansion is on quotes!"
	else
		if [[ $files == '' ]];
		then
			sudo find . -type f -exec perl -pi -e "s/$search/$replace/g" {} \;
		else
			sudo find . -type f -name "$files" -exec perl -pi -e "s/$search/$replace/g" {} \;
		fi
	fi
}
