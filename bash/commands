#!/usr/bin/env bash

function fail() {
  [ `command -v revolver` ] && pgrep revolver && revolver stop
  printf '%s\n' "$1" >&2 # Sends a message to stderr.
  exit "${2-1}" # Returns a code specified by $2 or 1 by default.
}

function lowercase()
{
  if [ -n "$1" ]; then
    echo "$1" | tr "[:upper:]" "[:lower:]"
  else
    cat - | tr "[:upper:]" "[:lower:]"
  fi
}

# Returns the active git branch - this is used in rewrite_prompt().
git_delete_new_files()
{
  for file in $(git st | grep '??' | awk '{print substr($0, 4)}'); do rm -r $file; done
}

# Get a list of all filesizes in the current folder ("du -sh *" for files).
get_filesizes()
{
  ls -laSh $1 | grep -v ^d | awk '{print $5 "\t" $9}'
}

# Drops all tables in a specified MySQL database.
mysql_drop_all_tables()
{
  user=$1
  database=$2

  if [[ "$user" == "" ]] || [[ "$database" == "" ]]
  then
    echo "usage: mysql_drop_all_tables <user> <database>"
  else
    mysqldump -u $user -p $database --add-drop-table --no-data | grep ^DROP | mysql -u $user -p $database
  fi
}

# Replaces a local mysql database with the specified one.
mysql_replace()
{
  database=$1
  sql_file=$2

  if [[ "$database" == "" ]] || [[ "$sql_file" == "" ]]
  then
    echo "usage: mysql_replace <database> <sql_file>"
  else
    echo "Dropping and re-creating database '$database'"
    mysql $database -e "drop database $database; create database $database;"

    echo "Importing $sql_file ..."
    mysql $database < $sql_file

    echo "Done."
  fi
}

get_ci_status() {
  # Get the SHA of the latest commit
  local latest_commit=$(git rev-parse HEAD)

  # Retrieve the latest run's status and conclusion for the latest commit
  local status_info=$(gh run list --json status,conclusion,headSha --jq ".[] | select(.headSha == \"$latest_commit\") | {status: .status, conclusion: .conclusion}" | head -n 1)

  # If no status info is found, return an error message
  if [ -z "$status_info" ]; then
    echo "No CI runs found for the latest commit."
    return 1
  fi

  # Extract the status and conclusion from the JSON output
  local status=$(echo "$status_info" | jq -r .status)
  local conclusion=$(echo "$status_info" | jq -r .conclusion)

  # Determine the CI status based on the conclusion
  if [[ "$status" == "in_progress" || "$status" == "queued" ]]; then
    echo "pending"
  elif [[ "$conclusion" == "success" ]]; then
    echo "success"
  elif [[ "$conclusion" == "failure" || "$conclusion" == "cancelled" ]]; then
    echo "failing"
  else
    echo "unknown"
  fi
}

# Returns information on LOC added/removed for a given git log range and an
# optional author.
git_loc()
{
  range=$1
  author=$2

  git log -$1 --author="$2" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }' -
}

# Syncs git production and staging branch with master.
git_merge()
{
  source_branch=$1
  target_branch=$2

  if [[ $target_branch == '' ]]; then
    target_branch='master'
  fi

  if [[ $source_branch == '' ]];
  then
    echo "usage: git_merge <source_branch> '<*target_branch>'"
  else
    git push origin $source_branch && \
      git checkout $target_branch && git merge $source_branch && git push origin $target_branch
    git checkout $source_branch
  fi
}

# Attempts to recursively find a match for a given string in the given file(s).
search()
{
  string=$1
  files=$2

  if [[ $string == '' ]];
  then
    echo "usage: search <search> '<*glob_expansion>'"
    echo "	Make sure the glob expansion is in quotes!"
  else
    if [[ $files == '' ]];
    then
      find . -type f -exec grep -l "$string" {} +
    else
      find . -type f -name "$files" -exec grep -l "$string" {} +
    fi
  fi
}

# Attempts to recursively search the given range of files for a given perl-compatible regex and replace with a given value.
search_and_replace()
{
  search=$1
  replace=$2
  files=$3

  if [[ $search == '' ]] || [[ $replace == '' ]];
  then
    echo "usage: search_and_replace <search> <replace <*glob_expansion>"
    echo "	Make sure the glob expansion is in quotes!"
  else
    if [[ $files == '' ]];
    then
      sudo find . -type f -exec perl -pi -e "s/$search/$replace/g" {} \;
    else
      sudo find . -type f -name "$files" -exec perl -pi -e "s/$search/$replace/g" {} \;
    fi
  fi
}

# Because we all want to know how many times we actually typed "gti" instead 
# of "git".
timesused()
{
  [[ -f ${HOME}/.bash_history ]] && grep -c "^${1}" ${HOME}/.bash_history
}

export_env_vars_from_file() {
  env_file=${1:-.env}
  [[ -f $env_file ]] && export $(cat $env_file | grep -v ^\# | xargs)
}
