#!/usr/bin/env bash

# Exports all ENV vars listed in a file. Loads ~/.env by default.
export_env_vars_from_file() {
  env_file=${1:-.env}
  [[ -f $env_file ]] && export $(cat $env_file | grep -v ^\# | xargs)
}

# One generic command to extract most compressed files.
extract() {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Helps us hard stop our custom executables during fails.
fail() {
  [ `command -v revolver` ] && pgrep revolver && revolver stop
  printf '%s\n' "$1" >&2 # Sends a message to stderr.
  exit "${2-1}" # Returns a code specified by $2 or 1 by default.
}

# Find the process ID of a given command. Note that you can use regex as well.
# 
#   pid '/d$/' 
#
# Would find pids of all processes with names ending in 'd'
pid() { 
  lsof -t -c "$@"
}

# Flattens any string you give it. Made to format user input like Y/N -> y/n.
lowercase()
{
  if [ -n "$1" ]; then
    echo "$1" | tr "[:upper:]" "[:lower:]"
  else
    cat - | tr "[:upper:]" "[:lower:]"
  fi
}

# Attempts to recursively search the given range of files for a given perl-compatible regex and replace with a given value.
# TODO: There are modern tools that handle this better. Look into them.
search_and_replace()
{
  search=$1
  replace=$2
  files=$3

  if [[ $search == '' ]] || [[ $replace == '' ]];
  then
    echo "usage: search_and_replace <search> <replace <*glob_expansion>"
    echo "	Make sure the glob expansion is in quotes!"
  else
    if [[ $files == '' ]];
    then
      sudo find . -type f -exec perl -pi -e "s/$search/$replace/g" {} \;
    else
      sudo find . -type f -name "$files" -exec perl -pi -e "s/$search/$replace/g" {} \;
    fi
  fi
}

# Because we all want to know how many times we actually typed "gti" instead 
# of "git".
timesused()
{
  [[ -f ${HOME}/.bash_history ]] && grep -c "^${1}" ${HOME}/.bash_history
}
