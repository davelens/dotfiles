#!/bin/bash

########################################################################
# GENERAL
########################################################################
export EDITOR=vim

# Remove the zsh warning introduced in macos Catalina
export BASH_SILENCE_DEPRECATION_WARNING=1

# Make ls & grep pretty
export CLICOLOR=1

# PAGER is the path to the program used to list the contents of files through
export PAGER='less --quit-if-one-screen --no-init --ignore-case --RAW-CONTROL-CHARS --quiet --dumb';

# Stop checking shellmail for new messages
unset MAILCHECK

# Ruby GC settings
# See: https://collectiveidea.com/blog/archives/2015/02/19/optimizing-rails-for-memory-usage-part-2-tuning-the-gc
export RUBY_GC_MALLOC_LIMIT=4000100
export RUBY_GC_MALLOC_LIMIT_MAX=16000100
export RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=1.1
export RUBY_GC_OLDMALLOC_LIMIT=16000100
export RUBY_GC_OLDMALLOC_LIMIT_MAX=16000100

# Go lang work dir
export GOPATH=${HOME}/.go


########################################################################
# PATH
########################################################################

# Homebrew installs in /usr/local/bin/brew, Linuxbrew in /usr/bin/brew.
[[ -f /usr/local/bin/brew ]] && export BREW_PATH=$(/usr/local/bin/brew --prefix)
[[ -f /usr/bin/brew ]] && export BREW_PATH=$(/usr/bin/brew --prefix)

# list the directories we want to add to the PATH variable, if they exist.
paths_to_add=(
  ${HOME}/.bin
  ${BREW_PATH}/{,s}bin
  /usr/local/{,s}bin
  /{,s}bin
  /usr/{,s}bin
);

if [[ $OS == 'windows' ]]; then
  paths_to_add+=(
    /mnt/c/Windows/System32
    /mnt/c/Windows/SysWOW64
  )
fi

# Now implode everything into the new PATH variable.
printf -v PATH "%s:" "${paths_to_add[@]}";
export PATH="${PATH%:}";

# Fixes installation of mysql2 gem due to missing openssl lib.
LIBRARY_PATH=${LIBRARY_PATH}:${BREW_PATH}/opt/openssl/lib/

# node.js modules path
export NODE_PATH="/usr/local/share/npm/lib/node_modules"

# RBENV initialization
eval "$(rbenv init -)"

# Alias hub straight into git
eval "$(hub alias -s)"

########################################################################
# HISTORY
########################################################################
# When the command contains an invalid history operation (for instance when
# using an unescaped "!" (I get that a lot in quick e-mails and commit
# messages) or a failed substitution (e.g. "^foo^bar" when there was no "foo"
# in the previous command line), do not throw away the command line, but let me
# correct it.
shopt -s histreedit;

# append to the history file rather than overwriting
shopt -s histappend

# Keep a reasonably long history.
export HISTSIZE=4096;

# Keep even more history lines inside the file, so we can still look up
# previous commands without needlessly cluttering the current shell's history.
export HISTFILESIZE=16384;

# When executing the same command twice or more in a row, only store it once.
export HISTCONTROL=ignoredups;

# Keep track of the time the commands were executed.
# The xterm colour escapes require special care when piping; e.g. "| less -R".
export HISTTIMEFORMAT="${FG_BLUE}${FONT_BOLD}%Y/%m/%d %H:%M:%S${FONT_RESET} ";

# let the history ignore the following commands
export HISTIGNORE="ls:ll:la:pwd:clear:h:j"


########################################################################
# LOCALE AND COMPLETION
########################################################################
# general case-insensitive globbing
shopt -s nocaseglob;

# do not autocomplete when accidentally pressing tab on an empty line.
shopt -s no_empty_cmd_completion;

# Do not overwrite files when redirecting using ">".
# Note that you can still override this with ">|".
set -o noclobber;

# prefer English and use UTF-8.
printf -v available_locales ' %s ' $(locale -a);
for lang in en_US en_GB en; do
  for locale in "$lang".{UTF-8,utf8}; do
    if [[ "$available_locales" =~ " $locale " ]]; then
      export LC_ALL="$locale";
      export LANG="$lang";
      break 2;
    fi;
  done;
done;
unset available_locales lang locale;

########################################################################
# BASH AUTOCOMPLETION
########################################################################
# load bash_completion through brew, when installed
if type brew &>/dev/null; then
  if [[ -r "${BREW_PATH}/etc/profile.d/bash_completion.sh" ]]; then
    source "${BREW_PATH}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${BREW_PATH}/etc/bash_completion.d/"*; do
      [[ -r "$COMPLETION" ]] && source "$COMPLETION"
    done
  fi
fi
